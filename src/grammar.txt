<statements>    ::= <statement> (<statement>)*

<statement>     ::= return <expr>?;
                ::= expr;

<expr>          ::= let <identifier> = <expr>
                ::= <identifier> = <expr>
                ::= <compare-expr> ((and | or) <compare-expr>)*
                
<compare-expr>  ::= (not) <compare-expr>
                ::= <arith-expr> (('==' | '!=' | '<' | '<=' | '>' | '>) <arith-expr>)*

<arith-expr>    ::= <term> (('+' | '-') <term>)*

<term>          ::= <factor> (('*' | '/') <factor>)*

<factor>        ::= call ('^' <factor>)*

<call>          ::= atom (<expr> (',' <expr>)* )?

<atom>          ::= INT/LONGINT/FLOAT/DOUBLE
                ::= ('+' | '-') <atom>
                ::= '(' <expr> ')'
                ::= '"' STRING '"'
                ::= <list-expr>
                ::= <if-expr>
                ::= <func-def>

<list-expr>     ::= '[' (<expr> (',' <expr>)* )? ']'

<if-expr>       ::= if <expr> { <expr> }
                        (elif { <expr> })*
                        (else { <expr> })?

<func-def>      ::= func <identifier>( (<identifier> (',' <identifier>)* )? ) { statements }